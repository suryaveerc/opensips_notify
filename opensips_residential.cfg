#
# $Id$
#
# OpenSIPS residential configuration script
#     by OpenSIPS Solutions <team@opensips-solutions.com>
#
# This script was generated via "make menuconfig", from
#   the "Residential" scenario.
# You can enable / disable more features / functionalities by
#   re-generating the scenario with different options.#
#
# Please refer to the Core CookBook at:
#      http://www.opensips.org/Resources/DocsCookbooks
# for a explanation of possible statements, functions and parameters.
#


####### Global Parameters #########

debug=LOG_LEVEL
log_stderror=yes
log_facility=LOG_LOCAL0


fork=yes
children=4

/* uncomment the following lines to enable debugging */
#debug=6
#fork=no
#log_stderror=yes

/* uncomment the next line to enable the auto temporary blacklisting of 
   not available destinations (default disabled) */
#disable_dns_blacklist=no

/* uncomment the next line to enable IPv6 lookup after IPv4 dns 
   lookup failures (default disabled) */
#dns_try_ipv6=yes

/* comment the next line to enable the auto discovery of local aliases
   based on revers DNS on IPs */
auto_aliases=no
alias="opensipstest.org"

listen=udp:HOST_IP:5060   # CUSTOMIZE ME

disable_tcp=yes

disable_tls=yes


####### Modules Section ########

#set module path
mpath="/usr/local/opensips/lib64/opensips/modules/"

#### SIGNALING module
loadmodule "signaling.so"

#### StateLess module
loadmodule "sl.so"

#### Transaction Module
loadmodule "tm.so"
modparam("tm", "fr_timer", 5)
modparam("tm", "fr_inv_timer", 30)
modparam("tm", "restart_fr_on_each_reply", 0)
modparam("tm", "onreply_avp_mode", 1)

#### Record Route Module
loadmodule "rr.so"
/* do not append from tag to the RR (no need for this script) */
modparam("rr", "append_fromtag", 0)

#### MAX ForWarD module
loadmodule "maxfwd.so"

#### SIP MSG OPerationS module
loadmodule "sipmsgops.so"

#### FIFO Management Interface
#loadmodule "mi_fifo.so"
#modparam("mi_fifo", "fifo_name", "/tmp/opensips_fifo")
#modparam("mi_fifo", "fifo_mode", 0666)


#### URI module
loadmodule "uri.so"
modparam("uri", "use_uri_table", 0)

#### USeR LOCation module
loadmodule "usrloc.so"
modparam("usrloc", "nat_bflag", 10)
modparam("usrloc", "db_mode",   0)

#### REGISTRAR module
loadmodule "registrar.so"
modparam("registrar", "tcp_persistent_flag", 7)

/* uncomment the next line not to allow more than 10 contacts per AOR */
#modparam("registrar", "max_contacts", 10)


#### PRESENCE modules
loadmodule "presence.so"
loadmodule "presence_xml.so"
modparam("presence_xml", "force_active", 1)
modparam("presence", "server_address", "sip:HOST_IP:5060") # CUSTOMIZE ME
modparam("presence", "cachedb_host","REDIS_HOST")
modparam("presence", "cachedb_port",REDIS_PORT)
# Used in PUB/SUB only.
modparam("presence", "micro_srv_arch",MICRO_SRV_ARCH)
modparam("presence", "queue_serverUrl","nats://MSG_HOST:4222")
# Used for PUB/SUB (pub_queue_subject/sub_queue_subject)
modparam("presence", "QUEUE_TYPE","QUEUE_SUBJECT")
# Used in NOTIFY only.
#modparam("presence", "queue_group","QUEUE_GROUP")
modparam("presence", "ROOT_URL","http://REST_SERVICE:REST_PORT/presence/")
modparam("presence", "available_pubs",AVAILABLE_PUBS)
modparam("presence", "available_subs",AVAILABLE_SUBS)

####### Routing Logic########

# main request routing logic

route {


    if(!mf_process_maxfwd_header("10")) {
        sl_send_reply("483", "Too Many Hops");
        exit;
    }

    if(has_totag()) {
	#        sequential request withing a dialog should# take the path determined by record - routing
        if(loose_route()) {
		#            route it out to whatever destination was set by loose_route()# in $du(destination URI).
            route(1);
        } else {
            if(is_method("SUBSCRIBE") && $rd == "HOST_IP:5060") {
			#                CUSTOMIZE ME
			# in -dialog subscribe requests
                route(2);
                exit;
            }
            sl_send_reply("404", "Not here");
        }
        exit;
    }

    #    CANCEL processing
    if(is_method("CANCEL")) {
        if(t_check_trans())
            t_relay();
        exit;
    }

    t_check_trans();

    if(!(is_method("REGISTER"))) {

        if(from_uri == myself)

        {

        } else {
		#            if caller is not local, then called number must be local

            if(!uri == myself) {
                send_reply("403", "Rely forbidden");
                exit;
            }
        }

    }

    #preloaded route checking
    if(loose_route()) {
        xlog("L_ERR","Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
        if(!is_method("ACK"))
            sl_send_reply("403", "Preload Route denied");
        exit;
    }

    #record routing
    if(!is_method("REGISTER|MESSAGE"))
        record_route();


    if(!uri == myself) {
        append_hf("P-hint: outbound\r\n");

        route(1);
    }

    #requests for my domain

    if(is_method("PUBLISH|SUBSCRIBE"))
        route(2);


    if($rU == NULL) {
	#request with no Username in RURI
        sl_send_reply("484", "Address Incomplete");
        exit;
    }
	#    when routing via usrloc, log the missed calls also
    setflag(2);
    route(1);
}


route[1] {

    if(!t_relay()) {
        send_reply("500", "Internal Error");
    };
    exit;
}


#Presence route
route[2] {
    if(!t_newtran()) {
        sl_reply_error();
        exit;
    }

    if(is_method("PUBLISH")) {
        force_rport();
        handle_publish();
    } else
    if(is_method("SUBSCRIBE")) {
        force_rport();
        handle_subscribe();
    }

    exit;
}